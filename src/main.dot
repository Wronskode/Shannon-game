digraph "main" {

splines  = ortho;
fontname = "Inconsolata";

node [colorscheme = ylgnbu4];
edge [colorscheme = dark28, dir = both];

BasicAI         [shape = record, label = "{ BasicAI | + playCUT() : Pair\<Vertex, Vertex\>\l + playSHORT() : Pair\<Vertex, Vertex\>\l }"];
ButtonClickType [shape = record, label = "{ \<\<enumeration\>\>\nButtonClickType | + HOME_PVIA : \l + JOUEUR_SHORT : \l + PVIA_EASY : \l + PVIA_MEDIUM : \l + HOME_PVPO : \l + JOUEUR_CUT : \l + JEU : \l + HOME_PVPL : \l + JOUEUR : \l + PVIA_HARD : \l + HOME_IAVIA : \l + HOME : \l|+ values() : ButtonClickType[]\l + valueOf(String) : ButtonClickType\l }"];
Callback        [shape = record, label = "{ \<\<interface\>\>\nCallback | + call() : void\l }"];
Game            [shape = record, label = "{ Game | - creatorTurn : Turn\l - secured : List\<Pair\<Vertex, Vertex\>\>\l - cutWon : boolean\l - id : long\l - nbVertices : int\l - joiner : boolean\l - againstAI : boolean\l - pvpOnline : boolean\l - seed : long\l - serverUri : String\l - log : Logger\l - cutted : List\<Pair\<Vertex, Vertex\>\>\l - typeIA : Turn\l - shortWon : boolean\l - ia : InterfaceIA\l - client : WebSocketClient\l - graph : Graph\l - lastsLines : ArrayList\<Pair\<Line, Turn\>\>\l - turn : Turn\l|+ isPvpOnline() : boolean\l + getGraph() : Graph\l + shortWon() : boolean\l + getTurn() : Turn\l + setShortWon(boolean) : void\l + getClient() : WebSocketClient\l + getCreatorTurn() : Turn\l + isAgainstAI() : boolean\l + getSeed() : long\l + getLastsLines() : ArrayList\<Pair\<Line, Turn\>\>\l + getNbVertices() : int\l + isJoiner() : boolean\l + getTypeIA() : Turn\l + getId() : long\l + getServerUri() : String\l + getIa() : InterfaceIA\l + getSecured() : List\<Pair\<Vertex, Vertex\>\>\l + setTurn(Turn) : void\l + getCutted() : List\<Pair\<Vertex, Vertex\>\>\l + setCutWon(boolean) : void\l + paintEdge(Line) : void\l + setColor() : void\l + getCutWon() : boolean\l - handleEvent(MouseEvent) : void\l + showWinner() : void\l + play(Vertex, Vertex) : void\l - redGraphIsConnexe(Graph) : boolean\l + graphIsOkay() : boolean\l + cutWon() : boolean\l + sendMove(Pair\<Vertex, Vertex\>) : void\l + cutEdge(Line) : void\l + play1vs1(String) : void\l - detectWinner() : void\l + getShortWon() : boolean\l }"];
Graph           [shape = record, label = "{ Graph | - random : Random\l - nbVertices : int\l - aroundCircle : boolean\l - neighbors : List\<Pair\<Vertex, Vertex\>\>\l - log : Logger\l - proba : double\l - vertices : List\<Vertex\>\l|+ getNbVertices() : int\l - thereAreACircleCollision(double, Vertex, Vertex) : boolean\l + isAroundCircle() : boolean\l + setNeighbors(List\<Pair\<Vertex, Vertex\>\>) : Graph\l + getProba() : double\l + setVertices(List\<Vertex\>) : Graph\l # canEqual(Object) : boolean\l + equals(Object) : boolean\l + getNeighbors() : List\<Pair\<Vertex, Vertex\>\>\l + toString() : String\l + getRandom() : Random\l + getVertices() : List\<Vertex\>\l + setAroundCircle(boolean) : Graph\l + hashCode() : int\l + setProba(double) : Graph\l + setRandom(Random) : Graph\l - generateGraph() : void\l + maxDeg() : int\l + setNbVertices(int) : void\l + estConnexe() : boolean\l + printGraph() : void\l + vertexDegree(int) : int\l + difference(List\<Pair\<Vertex, Vertex\>\>) : boolean\l + addVertice(Vertex) : void\l - intersect(int, int, int, int, int, int, int, int) : boolean\l + estCouvrant(Graph) : boolean\l + addNeighbor(Pair\<Vertex, Vertex\>) : void\l + minDeg() : int\l - det(int, int, int, int, int, int) : boolean\l - generateGraphPlanaire() : void\l + removeNeighbor(Pair\<Vertex, Vertex\>) : void\l - lineCircleCollision(double, Vertex, Vertex, Vertex) : boolean\l - triangleArea(Vertex, Vertex, Vertex) : double\l }"];
Gui             [shape = record, label = "{ Gui | - handler : EventHandler\<MouseEvent\>\l - edges : List\<Pair\<Pair\<Vertex, Vertex\>, Line\>\>\l - game : Game\l - log : Logger\l - seed : long\l - graph : Graph\l - level : Level\l - random : Random\l - stage : Stage\l|+ start(Stage) : void\l + getSeed() : long\l + join(TextField, Turn) : void\l + getHandler() : EventHandler\<MouseEvent\>\l + getGraph() : Graph\l + getGame() : Game\l + getEdges() : List\<Pair\<Pair\<Vertex, Vertex\>, Line\>\>\l + setSeed(long) : void\l + setHandler(EventHandler\<MouseEvent\>) : void\l + setGraph(Graph) : void\l + setGame(Game) : void\l + setEdges(List\<Pair\<Pair\<Vertex, Vertex\>, Line\>\>) : void\l + handleButtonClick(ButtonClickType) : void\l + create(Text, Turn) : void\l + showGraph(Pane) : void\l + popupMessage(Turn) : void\l + popupMessage() : void\l + run() : Scene\l }"];
GuiScene        [shape = record, label = "{ GuiScene | - random : Random\l - log : Logger\l|+ home(HandleClick) : Scene\l + pvp(HandleClick, JoinCreateField, JoinCreateField) : Scene\l - getBasicScene() : VBox\l + pvia(HandleClick) : Scene\l + joueur(HandleClick) : Scene\l }"];
HandleClick     [shape = record, label = "{ \<\<interface\>\>\nHandleClick | + call(ButtonClickType) : void\l }"];
InterfaceIA     [shape = record, label = "{ InterfaceIA | ~ game : Game\l ~ graph : Graph\l ~ plays : Turn\l|+ playCUT() : Pair\<Vertex, Vertex\>\l + playSHORT() : Pair\<Vertex, Vertex\>\l }"];
JoinCreateField [shape = record, label = "{ \<\<interface\>\>\nJoinCreateField | + call(Object, Turn) : void\l }"];
Level           [shape = record, label = "{ \<\<enumeration\>\>\nLevel | + MEDIUM : \l + HARD : \l + EASY : \l|+ valueOf(String) : Level\l + values() : Level[]\l }"];
Main            [shape = record, label = "{ Main | + main(String[]) : void\l }"];
Minimax         [shape = record, label = "{ Minimax | ~ depth : int\l|+ playSHORT() : Pair\<Vertex, Vertex\>\l + sum(List\<Pair\<Integer, Pair\<Vertex, Vertex\>\>\>) : int\l + evaluate(Graph, List\<Pair\<Vertex, Vertex\>\>, List\<Pair\<Vertex, Vertex\>\>) : int\l + playCUT() : Pair\<Vertex, Vertex\>\l + minMaxF(List\<Pair\<Vertex, Vertex\>\>, List\<Pair\<Vertex, Vertex\>\>, int) : List\<Pair\<Integer, Pair\<Vertex, Vertex\>\>\>\l }"];
Turn            [shape = record, label = "{ \<\<enumeration\>\>\nTurn | + SHORT : \l + CUT : \l|+ values() : Turn[]\l + valueOf(String) : Turn\l + flip() : Turn\l }"];
TypeJeu         [shape = record, label = "{ \<\<enumeration\>\>\nTypeJeu | + PLAYER_VS_PLAYER_LOCAL : \l + SHORT_VS_IA : \l + CUT_VS_IA : \l + IA_VS_IA : \l + PLAYER_VS_IA : \l + PLAYER_VS_PLAYER_DISTANT : \l|+ values() : TypeJeu[]\l + valueOf(String) : TypeJeu\l }"];
UtilsGui        [shape = record, label = "{ UtilsGui | + FONT : String\l + WINDOW_MARGE : int\l + WINDOW_SIZE : int\l - log : Logger\l + CIRCLE_SIZE : double\l|+ getReturnButton(ButtonClickType, HandleClick) : Button\l + createButton(String, EventHandler\<ActionEvent\>) : Button\l - addHoverEffect(Button) : void\l + addEnterOnText(TextField, EventHandler\<KeyEvent\>) : void\l + createText(String) : Text\l + createText(String, boolean) : Text\l }"];
Vertex          [shape = record, label = "{ Vertex | - listNeighbors : List\<Vertex\>\l - listNeighborsCut : HashSet\<Vertex\>\l - coords : Pair\<Integer, Integer\>\l - listNeighborsPaint : HashSet\<Vertex\>\l|+ getCoords() : Pair\<Integer, Integer\>\l + isCutOrPanted(Vertex) : boolean\l + getListNeighbors() : List\<Vertex\>\l + getListNeighborsCut() : HashSet\<Vertex\>\l + getListNeighborsPaint() : HashSet\<Vertex\>\l + setListNeighbors(List\<Vertex\>) : Vertex\l + setListNeighborsCut(HashSet\<Vertex\>) : Vertex\l + setListNeighborsPaint(HashSet\<Vertex\>) : Vertex\l + setCoords(Pair\<Integer, Integer\>) : Vertex\l + hashCode() : int\l + paint(Vertex) : void\l + getX() : int\l + isSameCouple(Pair\<Vertex, Vertex\>, Pair\<Vertex, Vertex\>) : boolean\l + getY() : int\l + toString() : String\l + isPainted(Vertex) : boolean\l + isCut(Vertex) : boolean\l + addNeighborVertex(Vertex) : void\l + removeNeighborVertex(Vertex) : void\l + equals(Object) : boolean\l + distance(Vertex) : double\l + removeNeighborVertex(int) : void\l + cut(Vertex) : void\l }"];
WebSocketClient [shape = record, label = "{ WebSocketClient | - session : Session\l - id : long\l - closed : boolean\l - CREATE_GAME_URI : String\l - JOIN_GAME_URI : String\l - callback : Callback\l - game : Game\l - SERVER_URI : String\l - SERVER_HOSTNAME : String\l - timer : Timer\l - response : String\l - joiner : boolean\l - log : Logger\l|+ reConnect(String) : void\l + close() : void\l + getResponse() : String\l + isClosed() : boolean\l + getCallback() : Callback\l + getTimer() : Timer\l + getId() : long\l + setCallback(Callback) : void\l + connectServer(String) : void\l + onClose() : void\l + connect(Callback) : Game\l + sendMessage(String) : void\l + getHandshake() : void\l + onMessage(String) : void\l + onOpen(Session) : void\l + setGame(Game) : void\l }"];

BasicAI         -> InterfaceIA     [color = "#000082", style = solid , arrowtail = none    , arrowhead = normal  , taillabel = "", label = "", headlabel = ""];
Minimax         -> InterfaceIA     [color = "#000082", style = solid , arrowtail = none    , arrowhead = normal  , taillabel = "", label = "", headlabel = ""];

}
